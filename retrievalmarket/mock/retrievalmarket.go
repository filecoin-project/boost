// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/go-fil-markets/retrievalmarket (interfaces: RetrievalProvider,SectorAccessor)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	retrievalmarket "github.com/filecoin-project/go-fil-markets/retrievalmarket"
	shared "github.com/filecoin-project/go-fil-markets/shared"
	abi "github.com/filecoin-project/go-state-types/abi"
	gomock "github.com/golang/mock/gomock"
)

// MockRetrievalProvider is a mock of RetrievalProvider interface.
type MockRetrievalProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRetrievalProviderMockRecorder
}

// MockRetrievalProviderMockRecorder is the mock recorder for MockRetrievalProvider.
type MockRetrievalProviderMockRecorder struct {
	mock *MockRetrievalProvider
}

// NewMockRetrievalProvider creates a new mock instance.
func NewMockRetrievalProvider(ctrl *gomock.Controller) *MockRetrievalProvider {
	mock := &MockRetrievalProvider{ctrl: ctrl}
	mock.recorder = &MockRetrievalProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetrievalProvider) EXPECT() *MockRetrievalProviderMockRecorder {
	return m.recorder
}

// GetAsk mocks base method.
func (m *MockRetrievalProvider) GetAsk() *retrievalmarket.Ask {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsk")
	ret0, _ := ret[0].(*retrievalmarket.Ask)
	return ret0
}

// GetAsk indicates an expected call of GetAsk.
func (mr *MockRetrievalProviderMockRecorder) GetAsk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsk", reflect.TypeOf((*MockRetrievalProvider)(nil).GetAsk))
}

// GetDynamicAsk mocks base method.
func (m *MockRetrievalProvider) GetDynamicAsk(arg0 context.Context, arg1 retrievalmarket.PricingInput, arg2 []abi.DealID) (retrievalmarket.Ask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamicAsk", arg0, arg1, arg2)
	ret0, _ := ret[0].(retrievalmarket.Ask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamicAsk indicates an expected call of GetDynamicAsk.
func (mr *MockRetrievalProviderMockRecorder) GetDynamicAsk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamicAsk", reflect.TypeOf((*MockRetrievalProvider)(nil).GetDynamicAsk), arg0, arg1, arg2)
}

// ListDeals mocks base method.
func (m *MockRetrievalProvider) ListDeals() map[retrievalmarket.ProviderDealIdentifier]retrievalmarket.ProviderDealState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeals")
	ret0, _ := ret[0].(map[retrievalmarket.ProviderDealIdentifier]retrievalmarket.ProviderDealState)
	return ret0
}

// ListDeals indicates an expected call of ListDeals.
func (mr *MockRetrievalProviderMockRecorder) ListDeals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeals", reflect.TypeOf((*MockRetrievalProvider)(nil).ListDeals))
}

// OnReady mocks base method.
func (m *MockRetrievalProvider) OnReady(arg0 shared.ReadyFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReady", arg0)
}

// OnReady indicates an expected call of OnReady.
func (mr *MockRetrievalProviderMockRecorder) OnReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReady", reflect.TypeOf((*MockRetrievalProvider)(nil).OnReady), arg0)
}

// SetAsk mocks base method.
func (m *MockRetrievalProvider) SetAsk(arg0 *retrievalmarket.Ask) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAsk", arg0)
}

// SetAsk indicates an expected call of SetAsk.
func (mr *MockRetrievalProviderMockRecorder) SetAsk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsk", reflect.TypeOf((*MockRetrievalProvider)(nil).SetAsk), arg0)
}

// Start mocks base method.
func (m *MockRetrievalProvider) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRetrievalProviderMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRetrievalProvider)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockRetrievalProvider) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRetrievalProviderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRetrievalProvider)(nil).Stop))
}

// SubscribeToEvents mocks base method.
func (m *MockRetrievalProvider) SubscribeToEvents(arg0 retrievalmarket.ProviderSubscriber) retrievalmarket.Unsubscribe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToEvents", arg0)
	ret0, _ := ret[0].(retrievalmarket.Unsubscribe)
	return ret0
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *MockRetrievalProviderMockRecorder) SubscribeToEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*MockRetrievalProvider)(nil).SubscribeToEvents), arg0)
}

// SubscribeToQueryEvents mocks base method.
func (m *MockRetrievalProvider) SubscribeToQueryEvents(arg0 retrievalmarket.ProviderQueryEventSubscriber) retrievalmarket.Unsubscribe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToQueryEvents", arg0)
	ret0, _ := ret[0].(retrievalmarket.Unsubscribe)
	return ret0
}

// SubscribeToQueryEvents indicates an expected call of SubscribeToQueryEvents.
func (mr *MockRetrievalProviderMockRecorder) SubscribeToQueryEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToQueryEvents", reflect.TypeOf((*MockRetrievalProvider)(nil).SubscribeToQueryEvents), arg0)
}

// SubscribeToValidationEvents mocks base method.
func (m *MockRetrievalProvider) SubscribeToValidationEvents(arg0 retrievalmarket.ProviderValidationSubscriber) retrievalmarket.Unsubscribe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToValidationEvents", arg0)
	ret0, _ := ret[0].(retrievalmarket.Unsubscribe)
	return ret0
}

// SubscribeToValidationEvents indicates an expected call of SubscribeToValidationEvents.
func (mr *MockRetrievalProviderMockRecorder) SubscribeToValidationEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToValidationEvents", reflect.TypeOf((*MockRetrievalProvider)(nil).SubscribeToValidationEvents), arg0)
}

// MockSectorAccessor is a mock of SectorAccessor interface.
type MockSectorAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockSectorAccessorMockRecorder
}

// MockSectorAccessorMockRecorder is the mock recorder for MockSectorAccessor.
type MockSectorAccessorMockRecorder struct {
	mock *MockSectorAccessor
}

// NewMockSectorAccessor creates a new mock instance.
func NewMockSectorAccessor(ctrl *gomock.Controller) *MockSectorAccessor {
	mock := &MockSectorAccessor{ctrl: ctrl}
	mock.recorder = &MockSectorAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSectorAccessor) EXPECT() *MockSectorAccessorMockRecorder {
	return m.recorder
}

// IsUnsealed mocks base method.
func (m *MockSectorAccessor) IsUnsealed(arg0 context.Context, arg1 abi.SectorNumber, arg2, arg3 abi.UnpaddedPieceSize) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUnsealed", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUnsealed indicates an expected call of IsUnsealed.
func (mr *MockSectorAccessorMockRecorder) IsUnsealed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUnsealed", reflect.TypeOf((*MockSectorAccessor)(nil).IsUnsealed), arg0, arg1, arg2, arg3)
}

// UnsealSector mocks base method.
func (m *MockSectorAccessor) UnsealSector(arg0 context.Context, arg1 abi.SectorNumber, arg2, arg3 abi.UnpaddedPieceSize) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsealSector", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnsealSector indicates an expected call of UnsealSector.
func (mr *MockSectorAccessorMockRecorder) UnsealSector(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsealSector", reflect.TypeOf((*MockSectorAccessor)(nil).UnsealSector), arg0, arg1, arg2, arg3)
}
