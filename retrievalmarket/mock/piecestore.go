// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/go-fil-markets/piecestore (interfaces: PieceStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	piecestore "github.com/filecoin-project/go-fil-markets/piecestore"
	shared "github.com/filecoin-project/go-fil-markets/shared"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
)

// MockPieceStore is a mock of PieceStore interface.
type MockPieceStore struct {
	ctrl     *gomock.Controller
	recorder *MockPieceStoreMockRecorder
}

// MockPieceStoreMockRecorder is the mock recorder for MockPieceStore.
type MockPieceStoreMockRecorder struct {
	mock *MockPieceStore
}

// NewMockPieceStore creates a new mock instance.
func NewMockPieceStore(ctrl *gomock.Controller) *MockPieceStore {
	mock := &MockPieceStore{ctrl: ctrl}
	mock.recorder = &MockPieceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPieceStore) EXPECT() *MockPieceStoreMockRecorder {
	return m.recorder
}

// AddDealForPiece mocks base method.
func (m *MockPieceStore) AddDealForPiece(arg0, arg1 cid.Cid, arg2 piecestore.DealInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDealForPiece", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDealForPiece indicates an expected call of AddDealForPiece.
func (mr *MockPieceStoreMockRecorder) AddDealForPiece(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDealForPiece", reflect.TypeOf((*MockPieceStore)(nil).AddDealForPiece), arg0, arg1, arg2)
}

// AddPieceBlockLocations mocks base method.
func (m *MockPieceStore) AddPieceBlockLocations(arg0 cid.Cid, arg1 map[cid.Cid]piecestore.BlockLocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPieceBlockLocations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPieceBlockLocations indicates an expected call of AddPieceBlockLocations.
func (mr *MockPieceStoreMockRecorder) AddPieceBlockLocations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPieceBlockLocations", reflect.TypeOf((*MockPieceStore)(nil).AddPieceBlockLocations), arg0, arg1)
}

// GetCIDInfo mocks base method.
func (m *MockPieceStore) GetCIDInfo(arg0 cid.Cid) (piecestore.CIDInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCIDInfo", arg0)
	ret0, _ := ret[0].(piecestore.CIDInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCIDInfo indicates an expected call of GetCIDInfo.
func (mr *MockPieceStoreMockRecorder) GetCIDInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCIDInfo", reflect.TypeOf((*MockPieceStore)(nil).GetCIDInfo), arg0)
}

// GetPieceInfo mocks base method.
func (m *MockPieceStore) GetPieceInfo(arg0 cid.Cid) (piecestore.PieceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieceInfo", arg0)
	ret0, _ := ret[0].(piecestore.PieceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieceInfo indicates an expected call of GetPieceInfo.
func (mr *MockPieceStoreMockRecorder) GetPieceInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceInfo", reflect.TypeOf((*MockPieceStore)(nil).GetPieceInfo), arg0)
}

// ListCidInfoKeys mocks base method.
func (m *MockPieceStore) ListCidInfoKeys() ([]cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCidInfoKeys")
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCidInfoKeys indicates an expected call of ListCidInfoKeys.
func (mr *MockPieceStoreMockRecorder) ListCidInfoKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCidInfoKeys", reflect.TypeOf((*MockPieceStore)(nil).ListCidInfoKeys))
}

// ListPieceInfoKeys mocks base method.
func (m *MockPieceStore) ListPieceInfoKeys() ([]cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPieceInfoKeys")
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPieceInfoKeys indicates an expected call of ListPieceInfoKeys.
func (mr *MockPieceStoreMockRecorder) ListPieceInfoKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPieceInfoKeys", reflect.TypeOf((*MockPieceStore)(nil).ListPieceInfoKeys))
}

// OnReady mocks base method.
func (m *MockPieceStore) OnReady(arg0 shared.ReadyFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReady", arg0)
}

// OnReady indicates an expected call of OnReady.
func (mr *MockPieceStoreMockRecorder) OnReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReady", reflect.TypeOf((*MockPieceStore)(nil).OnReady), arg0)
}

// Start mocks base method.
func (m *MockPieceStore) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPieceStoreMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPieceStore)(nil).Start), arg0)
}
