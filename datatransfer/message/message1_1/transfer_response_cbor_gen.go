// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package message1_1

import (
	"fmt"
	"io"
	"math"
	"sort"

	datatransfer "github.com/filecoin-project/boost/datatransfer"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *TransferResponse1_1) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{166}); err != nil {
		return err
	}

	// t.Acpt (bool) (bool)
	if len("Acpt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Acpt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Acpt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Acpt")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.Acpt); err != nil {
		return err
	}

	// t.Paus (bool) (bool)
	if len("Paus") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Paus\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Paus"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Paus")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.Paus); err != nil {
		return err
	}

	// t.Type (uint64) (uint64)
	if len("Type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
		return err
	}

	// t.VRes (typegen.Deferred) (struct)
	if len("VRes") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"VRes\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("VRes"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("VRes")); err != nil {
		return err
	}

	if err := t.VRes.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.VTyp (datatransfer.TypeIdentifier) (string)
	if len("VTyp") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"VTyp\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("VTyp"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("VTyp")); err != nil {
		return err
	}

	if len(t.VTyp) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.VTyp was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.VTyp))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.VTyp)); err != nil {
		return err
	}

	// t.XferID (uint64) (uint64)
	if len("XferID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"XferID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("XferID"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("XferID")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.XferID)); err != nil {
		return err
	}

	return nil
}

func (t *TransferResponse1_1) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TransferResponse1_1{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TransferResponse1_1: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Acpt (bool) (bool)
		case "Acpt":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Acpt = false
			case 21:
				t.Acpt = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Paus (bool) (bool)
		case "Paus":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Paus = false
			case 21:
				t.Paus = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}
			// t.Type (uint64) (uint64)
		case "Type":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Type = uint64(extra)

			}
			// t.VRes (typegen.Deferred) (struct)
		case "VRes":

			{

				t.VRes = new(cbg.Deferred)

				if err := t.VRes.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.VTyp (datatransfer.TypeIdentifier) (string)
		case "VTyp":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.VTyp = datatransfer.TypeIdentifier(sval)
			}
			// t.XferID (uint64) (uint64)
		case "XferID":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.XferID = uint64(extra)

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
