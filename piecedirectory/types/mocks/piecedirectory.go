// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/boost/piecedirectory/types (interfaces: PieceReader)

// Package mock_piecedirectory is a generated GoMock package.
package mock_piecedirectory

import (
	context "context"
	reflect "reflect"

	types "github.com/filecoin-project/boost/piecedirectory/types"
	address "github.com/filecoin-project/go-address"
	abi "github.com/filecoin-project/go-state-types/abi"
	gomock "github.com/golang/mock/gomock"
)

// MockPieceReader is a mock of PieceReader interface.
type MockPieceReader struct {
	ctrl     *gomock.Controller
	recorder *MockPieceReaderMockRecorder
}

// MockPieceReaderMockRecorder is the mock recorder for MockPieceReader.
type MockPieceReaderMockRecorder struct {
	mock *MockPieceReader
}

// NewMockPieceReader creates a new mock instance.
func NewMockPieceReader(ctrl *gomock.Controller) *MockPieceReader {
	mock := &MockPieceReader{ctrl: ctrl}
	mock.recorder = &MockPieceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPieceReader) EXPECT() *MockPieceReaderMockRecorder {
	return m.recorder
}

// GetReader mocks base method.
func (m *MockPieceReader) GetReader(arg0 context.Context, arg1 address.Address, arg2 abi.SectorNumber, arg3, arg4 abi.PaddedPieceSize) (types.SectionReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReader", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(types.SectionReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReader indicates an expected call of GetReader.
func (mr *MockPieceReaderMockRecorder) GetReader(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReader", reflect.TypeOf((*MockPieceReader)(nil).GetReader), arg0, arg1, arg2, arg3, arg4)
}
