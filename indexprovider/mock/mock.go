// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/boost-gfm/storagemarket (interfaces: StorageProvider)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	shared "github.com/filecoin-project/boost-gfm/shared"
	storagemarket "github.com/filecoin-project/boost-gfm/storagemarket"
	abi "github.com/filecoin-project/go-state-types/abi"
	big "github.com/filecoin-project/go-state-types/big"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
)

// MockStorageProvider is a mock of StorageProvider interface.
type MockStorageProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProviderMockRecorder
}

// MockStorageProviderMockRecorder is the mock recorder for MockStorageProvider.
type MockStorageProviderMockRecorder struct {
	mock *MockStorageProvider
}

// NewMockStorageProvider creates a new mock instance.
func NewMockStorageProvider(ctrl *gomock.Controller) *MockStorageProvider {
	mock := &MockStorageProvider{ctrl: ctrl}
	mock.recorder = &MockStorageProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProvider) EXPECT() *MockStorageProviderMockRecorder {
	return m.recorder
}

// AddStorageCollateral mocks base method.
func (m *MockStorageProvider) AddStorageCollateral(arg0 context.Context, arg1 big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStorageCollateral", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStorageCollateral indicates an expected call of AddStorageCollateral.
func (mr *MockStorageProviderMockRecorder) AddStorageCollateral(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStorageCollateral", reflect.TypeOf((*MockStorageProvider)(nil).AddStorageCollateral), arg0, arg1)
}

// AnnounceAllDealsToIndexer mocks base method.
func (m *MockStorageProvider) AnnounceAllDealsToIndexer(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceAllDealsToIndexer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnounceAllDealsToIndexer indicates an expected call of AnnounceAllDealsToIndexer.
func (mr *MockStorageProviderMockRecorder) AnnounceAllDealsToIndexer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceAllDealsToIndexer", reflect.TypeOf((*MockStorageProvider)(nil).AnnounceAllDealsToIndexer), arg0)
}

// AnnounceDealToIndexer mocks base method.
func (m *MockStorageProvider) AnnounceDealToIndexer(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceDealToIndexer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnounceDealToIndexer indicates an expected call of AnnounceDealToIndexer.
func (mr *MockStorageProviderMockRecorder) AnnounceDealToIndexer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceDealToIndexer", reflect.TypeOf((*MockStorageProvider)(nil).AnnounceDealToIndexer), arg0, arg1)
}

// GetAsk mocks base method.
func (m *MockStorageProvider) GetAsk() *storagemarket.SignedStorageAsk {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsk")
	ret0, _ := ret[0].(*storagemarket.SignedStorageAsk)
	return ret0
}

// GetAsk indicates an expected call of GetAsk.
func (mr *MockStorageProviderMockRecorder) GetAsk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsk", reflect.TypeOf((*MockStorageProvider)(nil).GetAsk))
}

// GetLocalDeal mocks base method.
func (m *MockStorageProvider) GetLocalDeal(arg0 cid.Cid) (storagemarket.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalDeal", arg0)
	ret0, _ := ret[0].(storagemarket.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalDeal indicates an expected call of GetLocalDeal.
func (mr *MockStorageProviderMockRecorder) GetLocalDeal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalDeal", reflect.TypeOf((*MockStorageProvider)(nil).GetLocalDeal), arg0)
}

// GetStorageCollateral mocks base method.
func (m *MockStorageProvider) GetStorageCollateral(arg0 context.Context) (storagemarket.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageCollateral", arg0)
	ret0, _ := ret[0].(storagemarket.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageCollateral indicates an expected call of GetStorageCollateral.
func (mr *MockStorageProviderMockRecorder) GetStorageCollateral(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageCollateral", reflect.TypeOf((*MockStorageProvider)(nil).GetStorageCollateral), arg0)
}

// ImportDataForDeal mocks base method.
func (m *MockStorageProvider) ImportDataForDeal(arg0 context.Context, arg1 cid.Cid, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportDataForDeal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportDataForDeal indicates an expected call of ImportDataForDeal.
func (mr *MockStorageProviderMockRecorder) ImportDataForDeal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDataForDeal", reflect.TypeOf((*MockStorageProvider)(nil).ImportDataForDeal), arg0, arg1, arg2)
}

// ListLocalDeals mocks base method.
func (m *MockStorageProvider) ListLocalDeals() ([]storagemarket.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalDeals")
	ret0, _ := ret[0].([]storagemarket.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocalDeals indicates an expected call of ListLocalDeals.
func (mr *MockStorageProviderMockRecorder) ListLocalDeals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalDeals", reflect.TypeOf((*MockStorageProvider)(nil).ListLocalDeals))
}

// ListLocalDealsPage mocks base method.
func (m *MockStorageProvider) ListLocalDealsPage(arg0 *cid.Cid, arg1, arg2 int) ([]storagemarket.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalDealsPage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storagemarket.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocalDealsPage indicates an expected call of ListLocalDealsPage.
func (mr *MockStorageProviderMockRecorder) ListLocalDealsPage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalDealsPage", reflect.TypeOf((*MockStorageProvider)(nil).ListLocalDealsPage), arg0, arg1, arg2)
}

// LocalDealCount mocks base method.
func (m *MockStorageProvider) LocalDealCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalDealCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocalDealCount indicates an expected call of LocalDealCount.
func (mr *MockStorageProviderMockRecorder) LocalDealCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalDealCount", reflect.TypeOf((*MockStorageProvider)(nil).LocalDealCount))
}

// OnReady mocks base method.
func (m *MockStorageProvider) OnReady(arg0 shared.ReadyFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReady", arg0)
}

// OnReady indicates an expected call of OnReady.
func (mr *MockStorageProviderMockRecorder) OnReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReady", reflect.TypeOf((*MockStorageProvider)(nil).OnReady), arg0)
}

// RetryDealPublishing mocks base method.
func (m *MockStorageProvider) RetryDealPublishing(arg0 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryDealPublishing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryDealPublishing indicates an expected call of RetryDealPublishing.
func (mr *MockStorageProviderMockRecorder) RetryDealPublishing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryDealPublishing", reflect.TypeOf((*MockStorageProvider)(nil).RetryDealPublishing), arg0)
}

// SetAsk mocks base method.
func (m *MockStorageProvider) SetAsk(arg0, arg1 big.Int, arg2 abi.ChainEpoch, arg3 ...storagemarket.StorageAskOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAsk", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsk indicates an expected call of SetAsk.
func (mr *MockStorageProviderMockRecorder) SetAsk(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsk", reflect.TypeOf((*MockStorageProvider)(nil).SetAsk), varargs...)
}

// Start mocks base method.
func (m *MockStorageProvider) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStorageProviderMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStorageProvider)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockStorageProvider) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStorageProviderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStorageProvider)(nil).Stop))
}

// SubscribeToEvents mocks base method.
func (m *MockStorageProvider) SubscribeToEvents(arg0 storagemarket.ProviderSubscriber) shared.Unsubscribe {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToEvents", arg0)
	ret0, _ := ret[0].(shared.Unsubscribe)
	return ret0
}

// SubscribeToEvents indicates an expected call of SubscribeToEvents.
func (mr *MockStorageProviderMockRecorder) SubscribeToEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToEvents", reflect.TypeOf((*MockStorageProvider)(nil).SubscribeToEvents), arg0)
}
