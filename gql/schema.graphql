schema {
  query: RootQuery
  subscription: RootSubscription
  mutation: RootMutation
}

"""
The `Time` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar Time

type Deal {
  ID: ID!
  ClientAddress: String!
  ProviderAddress: String!
  CreatedAt: Time!
  PieceCid: String!
  PieceSize: Float!
  ProviderCollateral: Float!
  StartEpoch: Float!
  EndEpoch: Float!
  Message: String!
  Logs: [DealLog]!
}

type DealList {
  totalCount: Int!
  next: ID
  deals: [Deal]!
}

type DealLog {
  DealID: ID!
  CreatedAt: Time!
  Text: String!
}

type Storage {
  Name: String!
  Capacity: Float!
  Used: Float!
}

type FundAmount {
  Name: String!
  Capacity: Float!
}

type FundsLogList {
  totalCount: Int!
  logs: [FundsLog]!
  next: Time
}

type FundsLog {
  DealID: ID!
  CreatedAt: Time!
  Amount: Float!
  Text: String!
}

type DealPublish {
  Period: Int!
  Start: Time!
  MaxDealsPerMsg: Int!
  Deals: [Deal]!
}

type RootQuery {
  """Get Deal by ID"""
  deal(id: ID!): Deal

  """Get all Deals"""
  deals(first: ID, limit: Int): DealList!

  """Get storage space usage"""
  storage: [Storage]!

  """Get funds available"""
  funds: [FundAmount]!

  """Get log of fund transactions"""
  fundsLogs: FundsLogList!

  """Get information about deals that are pending being published"""
  dealPublish: DealPublish!
}

type RootMutation {
  """Cancel a Deal"""
  dealCancel(id: ID!): ID!

  """Publish all pending deals now"""
  dealPublishNow: Boolean!
}

type RootSubscription {
  """Subscribe to Deal updates by ID"""
  dealUpdate(id: ID!): Deal
  """Subscribe to new Deals"""
  dealNew: Deal
}
