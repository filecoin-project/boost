// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

var lengthBufContractParamsVersion1 = []byte{132}

func (t *ContractParamsVersion1) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write(lengthBufContractParamsVersion1); err != nil {
		return err
	}

	// t.LocationRef (string) (string)
	if len(t.LocationRef) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.LocationRef was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.LocationRef))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.LocationRef)); err != nil {
		return err
	}

	// t.CarSize (uint64) (uint64)

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CarSize)); err != nil {
		return err
	}

	// t.SkipIpniAnnounce (bool) (bool)
	if err := cbg.WriteBool(w, t.SkipIpniAnnounce); err != nil {
		return err
	}

	// t.RemoveUnsealedCopy (bool) (bool)
	if err := cbg.WriteBool(w, t.RemoveUnsealedCopy); err != nil {
		return err
	}
	return nil
}

func (t *ContractParamsVersion1) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ContractParamsVersion1{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 4 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.LocationRef (string) (string)

	{
		sval, err := cbg.ReadString(cr)
		if err != nil {
			return err
		}

		t.LocationRef = string(sval)
	}
	// t.CarSize (uint64) (uint64)

	{

		maj, extra, err = cr.ReadHeader()
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.CarSize = uint64(extra)

	}
	// t.SkipIpniAnnounce (bool) (bool)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.SkipIpniAnnounce = false
	case 21:
		t.SkipIpniAnnounce = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.RemoveUnsealedCopy (bool) (bool)

	maj, extra, err = cr.ReadHeader()
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.RemoveUnsealedCopy = false
	case 21:
		t.RemoveUnsealedCopy = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	return nil
}
