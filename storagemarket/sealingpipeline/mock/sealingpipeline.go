// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/boost/storagemarket/sealingpipeline (interfaces: API)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	address "github.com/filecoin-project/go-address"
	abi "github.com/filecoin-project/go-state-types/abi"
	api "github.com/filecoin-project/lotus/api"
	storiface "github.com/filecoin-project/lotus/storage/sealer/storiface"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ActorAddress mocks base method.
func (m *MockAPI) ActorAddress(arg0 context.Context) (address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorAddress", arg0)
	ret0, _ := ret[0].(address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorAddress indicates an expected call of ActorAddress.
func (mr *MockAPIMockRecorder) ActorAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorAddress", reflect.TypeOf((*MockAPI)(nil).ActorAddress), arg0)
}

// SectorsList mocks base method.
func (m *MockAPI) SectorsList(arg0 context.Context) ([]abi.SectorNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorsList", arg0)
	ret0, _ := ret[0].([]abi.SectorNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectorsList indicates an expected call of SectorsList.
func (mr *MockAPIMockRecorder) SectorsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorsList", reflect.TypeOf((*MockAPI)(nil).SectorsList), arg0)
}

// SectorsListInStates mocks base method.
func (m *MockAPI) SectorsListInStates(arg0 context.Context, arg1 []api.SectorState) ([]abi.SectorNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorsListInStates", arg0, arg1)
	ret0, _ := ret[0].([]abi.SectorNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectorsListInStates indicates an expected call of SectorsListInStates.
func (mr *MockAPIMockRecorder) SectorsListInStates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorsListInStates", reflect.TypeOf((*MockAPI)(nil).SectorsListInStates), arg0, arg1)
}

// SectorsStatus mocks base method.
func (m *MockAPI) SectorsStatus(arg0 context.Context, arg1 abi.SectorNumber, arg2 bool) (api.SectorInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorsStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(api.SectorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectorsStatus indicates an expected call of SectorsStatus.
func (mr *MockAPIMockRecorder) SectorsStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorsStatus", reflect.TypeOf((*MockAPI)(nil).SectorsStatus), arg0, arg1, arg2)
}

// SectorsSummary mocks base method.
func (m *MockAPI) SectorsSummary(arg0 context.Context) (map[api.SectorState]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorsSummary", arg0)
	ret0, _ := ret[0].(map[api.SectorState]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectorsSummary indicates an expected call of SectorsSummary.
func (mr *MockAPIMockRecorder) SectorsSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorsSummary", reflect.TypeOf((*MockAPI)(nil).SectorsSummary), arg0)
}

// WorkerJobs mocks base method.
func (m *MockAPI) WorkerJobs(arg0 context.Context) (map[uuid.UUID][]storiface.WorkerJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerJobs", arg0)
	ret0, _ := ret[0].(map[uuid.UUID][]storiface.WorkerJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkerJobs indicates an expected call of WorkerJobs.
func (mr *MockAPIMockRecorder) WorkerJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerJobs", reflect.TypeOf((*MockAPI)(nil).WorkerJobs), arg0)
}
