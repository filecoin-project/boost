// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/boost/lib/legacy (interfaces: LegacyDealManager)

// Package mock_legacy is a generated GoMock package.
package mock_legacy

import (
	context "context"
	reflect "reflect"

	legacytypes "github.com/filecoin-project/boost/storagemarket/types/legacytypes"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
)

// MockLegacyDealManager is a mock of LegacyDealManager interface.
type MockLegacyDealManager struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyDealManagerMockRecorder
}

// MockLegacyDealManagerMockRecorder is the mock recorder for MockLegacyDealManager.
type MockLegacyDealManagerMockRecorder struct {
	mock *MockLegacyDealManager
}

// NewMockLegacyDealManager creates a new mock instance.
func NewMockLegacyDealManager(ctrl *gomock.Controller) *MockLegacyDealManager {
	mock := &MockLegacyDealManager{ctrl: ctrl}
	mock.recorder = &MockLegacyDealManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLegacyDealManager) EXPECT() *MockLegacyDealManagerMockRecorder {
	return m.recorder
}

// ByPayloadCid mocks base method.
func (m *MockLegacyDealManager) ByPayloadCid(arg0 context.Context, arg1 cid.Cid) ([]legacytypes.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByPayloadCid", arg0, arg1)
	ret0, _ := ret[0].([]legacytypes.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByPayloadCid indicates an expected call of ByPayloadCid.
func (mr *MockLegacyDealManagerMockRecorder) ByPayloadCid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByPayloadCid", reflect.TypeOf((*MockLegacyDealManager)(nil).ByPayloadCid), arg0, arg1)
}

// ByPieceCid mocks base method.
func (m *MockLegacyDealManager) ByPieceCid(arg0 context.Context, arg1 cid.Cid) ([]legacytypes.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByPieceCid", arg0, arg1)
	ret0, _ := ret[0].([]legacytypes.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByPieceCid indicates an expected call of ByPieceCid.
func (mr *MockLegacyDealManagerMockRecorder) ByPieceCid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByPieceCid", reflect.TypeOf((*MockLegacyDealManager)(nil).ByPieceCid), arg0, arg1)
}

// ByPropCid mocks base method.
func (m *MockLegacyDealManager) ByPropCid(arg0 cid.Cid) (legacytypes.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByPropCid", arg0)
	ret0, _ := ret[0].(legacytypes.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByPropCid indicates an expected call of ByPropCid.
func (mr *MockLegacyDealManagerMockRecorder) ByPropCid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByPropCid", reflect.TypeOf((*MockLegacyDealManager)(nil).ByPropCid), arg0)
}

// ByPublishCid mocks base method.
func (m *MockLegacyDealManager) ByPublishCid(arg0 context.Context, arg1 cid.Cid) ([]legacytypes.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByPublishCid", arg0, arg1)
	ret0, _ := ret[0].([]legacytypes.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByPublishCid indicates an expected call of ByPublishCid.
func (mr *MockLegacyDealManagerMockRecorder) ByPublishCid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByPublishCid", reflect.TypeOf((*MockLegacyDealManager)(nil).ByPublishCid), arg0, arg1)
}

// DealCount mocks base method.
func (m *MockLegacyDealManager) DealCount(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealCount indicates an expected call of DealCount.
func (mr *MockLegacyDealManagerMockRecorder) DealCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealCount", reflect.TypeOf((*MockLegacyDealManager)(nil).DealCount), arg0)
}

// ListDeals mocks base method.
func (m *MockLegacyDealManager) ListDeals() ([]legacytypes.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeals")
	ret0, _ := ret[0].([]legacytypes.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeals indicates an expected call of ListDeals.
func (mr *MockLegacyDealManagerMockRecorder) ListDeals() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeals", reflect.TypeOf((*MockLegacyDealManager)(nil).ListDeals))
}

// ListLocalDealsPage mocks base method.
func (m *MockLegacyDealManager) ListLocalDealsPage(arg0 *cid.Cid, arg1, arg2 int) ([]legacytypes.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalDealsPage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]legacytypes.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocalDealsPage indicates an expected call of ListLocalDealsPage.
func (mr *MockLegacyDealManagerMockRecorder) ListLocalDealsPage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalDealsPage", reflect.TypeOf((*MockLegacyDealManager)(nil).ListLocalDealsPage), arg0, arg1, arg2)
}

// Run mocks base method.
func (m *MockLegacyDealManager) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockLegacyDealManagerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLegacyDealManager)(nil).Run), arg0)
}
