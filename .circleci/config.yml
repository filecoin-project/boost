version: 2.1
orbs:
  go: gotest/tools@0.0.13

executors:
  golang:
    docker:
      - image: circleci/golang:1.17.2
    resource_class: 2xlarge
  ubuntu:
    docker:
      - image: ubuntu:20.04

commands:
  install-deps:
    steps:
      - go/install-ssh
      - go/install: {package: git}
  prepare:
    parameters:
      linux:
        default: true
        description: is a linux build environment?
        type: boolean
      darwin:
        default: false
        description: is a darwin build environment?
        type: boolean
    steps:
      - checkout
      - git_fetch_all_tags
      - checkout
      - when:
          condition: << parameters.linux >>
          steps:
            - run: sudo apt-get update
            - run: sudo apt-get install ocl-icd-opencl-dev libhwloc-dev
      - run: git submodule sync
      - run: git submodule update --init
  download-params:
    steps:
      - restore_cache:
          name: Restore parameters cache
          keys:
            - 'v25-8mb-lotus-params'
          paths:
            - /var/tmp/filecoin-proof-parameters/
      - run:  lotus fetch-params 8388608
      - save_cache:
          name: Save parameters cache
          key: 'v25-8mb-lotus-params'
          paths:
            - /var/tmp/filecoin-proof-parameters/
  lotus-artefacts:
    steps:
      - restore_cache:
          name: Restore lotus artefacts cache
          keys:
            - 'lotus-v1.14.3'
          paths:
            - /tmp/lotus-artefacts
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: copy latest stable lotus binaries
          command: |
            docker pull nonsens3/lotus:v1.14.3
            id=$(docker create nonsens3/lotus:v1.14.3)
            mkdir -p /tmp/lotus-artefacts
            docker cp $id:/usr/local/bin/lotus-seed /tmp/lotus-artefacts/lotus-seed
            docker cp $id:/usr/local/bin/lotus-miner /tmp/lotus-artefacts/lotus-miner
            docker cp $id:/usr/local/bin/lotus /tmp/lotus-artefacts/lotus
            docker cp $id:/lib/libhwloc.so.5 /tmp/lotus-artefacts/libhwloc.so.5
            docker rm -v $id
      - save_cache:
          name: Save lotus artefacts cache
          key: 'lotus-v1.14.3'
          paths:
            - /tmp/lotus-artefacts
  git_fetch_all_tags:
    steps:
      - run:
          name: fetch all tags
          command: |
            git fetch --all

jobs:
  mod-tidy-check:
    executor: golang
    steps:
      - install-deps
      - prepare
      - go/mod-tidy-check

  build-all:
    executor: golang
    steps:
      - install-deps
      - prepare
      - run: sudo apt-get update
      - run: sudo apt-get install npm
      - run:
          command: make buildall
      - store_artifacts:
          path: boost
      - run: mkdir linux && mv boost linux/
      - persist_to_workspace:
          root: "."
          paths:
            - linux

  test:
    description: |
      Run go tests
    parameters: &test-params
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: "-v --tags=debug -timeout 15m"
        description: Flags passed to go test.
      target:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
      suite:
        type: string
        default: unit
        description: Test suite name to report to CircleCI.
    executor: << parameters.executor >>
    steps:
      - install-deps
      - prepare
      - run:
          command: make debug
          no_output_timeout: 30m
      - lotus-artefacts
      - run:
          name: copy library and add lotus binaries to PATH
          command: |
            sudo cp /tmp/lotus-artefacts/libhwloc.so.5 /lib/x86_64-linux-gnu/
            sudo cp /tmp/lotus-artefacts/lotus /usr/local/bin/
            sudo cp /tmp/lotus-artefacts/lotus-miner /usr/local/bin/
            sudo cp /tmp/lotus-artefacts/lotus-seed /usr/local/bin/
      - download-params
      - run:
          name: go test
          command: |
            go test \
              << parameters.go-test-flags >> \
              << parameters.target >>
          no_output_timeout: 30m

  build-macos:
    description: build darwin boost binary
    macos:
      xcode: "12.5.0"
    working_directory: ~/go/src/github.com/filecoin-project/boost
    steps:
      - prepare:
          linux: false
          darwin: true
      - run:
          name: Install go
          command: |
            curl -O https://dl.google.com/go/go1.17.2.darwin-amd64.pkg && \
            sudo installer -pkg go1.17.2.darwin-amd64.pkg -target /
      - run:
          name: Install pkg-config
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pkg-config
      - run: go version
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run:
          name: Install hwloc
          command: |
            mkdir ~/hwloc
            curl --location https://download.open-mpi.org/release/hwloc/v2.4/hwloc-2.4.1.tar.gz --output ~/hwloc/hwloc-2.4.1.tar.gz
            cd ~/hwloc
            tar -xvzpf hwloc-2.4.1.tar.gz
            cd hwloc-2.4.1
            ./configure && make && sudo make install
      - restore_cache:
          name: restore cargo cache
          key: v3-go-deps-{{ arch }}-{{ checksum "~/go/src/github.com/filecoin-project/boost/go.sum" }}
      - install-deps
      - run:
          command: make debug
          no_output_timeout: 30m
      - run:
          name: check tag and version output match
          command: ./scripts/version-check.sh ./boost
      - store_artifacts:
          path: boost
      - run: mkdir darwin && mv boost darwin/
      - persist_to_workspace:
          root: "."
          paths:
            - darwin
      - save_cache:
          name: save cargo cache
          key: v3-go-deps-{{ arch }}-{{ checksum "~/go/src/github.com/filecoin-project/boost/go.sum" }}
          paths:
            - "~/.rustup"
            - "~/.cargo"

  gofmt:
    executor: golang
    steps:
      - install-deps
      - prepare
      - run:
          command: "! go fmt ./... 2>&1 | read"

  lint: &lint
    description: |
      Run golangci-lint.
    parameters:
      executor:
        type: executor
        default: golang
      golangci-lint-version:
        type: string
        default: 1.27.0
      concurrency:
        type: string
        default: '2'
        description: |
          Concurrency used to run linters. Defaults to 2 because NumCPU is not
          aware of container CPU limits.
      args:
        type: string
        default: ''
        description: |
          Arguments to pass to golangci-lint
    executor: << parameters.executor >>
    steps:
      - install-deps
      - prepare
      - run:
          command: make debug deps
          no_output_timeout: 30m
      - go/install-golangci-lint:
          gobin: $HOME/.local/bin
          version: << parameters.golangci-lint-version >>
      - run:
          name: Lint
          command: |
            $HOME/.local/bin/golangci-lint run -v --timeout 2m \
              --concurrency << parameters.concurrency >> << parameters.args >>
  lint-all:
    <<: *lint

workflows:
  version: 2.1
  ci:
    jobs:
      - lint-all:
          concurrency: "16"   # expend all docker 2xlarge CPUs.
      - mod-tidy-check
      - gofmt
      - build-all:
          filters:
            tags:
              only:
                - /^v\d+\.\d+\.\d+(-rc\d+)?$/
      - build-macos:
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v\d+\.\d+\.\d+(-rc\d+)?$/
      - test:
          name: test-itest
          suite: itest
          target: "./itests/..."
      - test:
          name: test-all
          suite: all
          target: "`go list ./... | grep -v boost/itests`"
